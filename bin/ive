#!/usr/bin/env ruby

require "thor"
require "ive"

class IveRunner < Thor
  class_options :git => false

  desc "list", "Show all the possible version bumps."
  def list
    Ive::Base.new.list
  end

  %i(major minor patch build).each do |type|
    desc type, "Perform a #{type} version bump."
    method_option :path, :aliases => "-p", :desc => "Supply the path where the project is located"
    method_option :target, :aliases => "-t", :desc => "Supply the target to set the #{type} version"
    define_method type do
      ENV["IVE_PATH"] = options[:path]
      ENV["IVE_TARGET"] = options[:target]
      Ive::Base.new.bump type, git?
    end
  end

  desc "version", "Show the current project version."
  method_option :path, :aliases => "-p", :desc => "Supply the path where the project is located"
  method_option :target, :aliases => "-t", :desc => "Supply the target to read the version"
  def version
    ENV["IVE_PATH"] = options[:path]
    ENV["IVE_TARGET"] = options[:target]
    Ive::Base.new.version
  end

  desc "init", "Initialize the version to 1.0.0 for the current project."
  method_option :path, :aliases => "-p", :desc => "Supply the path where the project is located"
  method_option :target, :aliases => "-p", :desc => "Supply the target to initialize the version"
  def init
    ENV["IVE_PATH"] = options[:path]
    ENV["IVE_TARGET"] = options[:target]
    Ive::Base.new.initialize_version git?
  end

  desc "setup", "Create the .ive configuration file for the current project."
  method_option :path, :aliases => "-p", :desc => "Supply the path where the project is located"
  def setup
    ENV["IVE_PATH"] = options[:path]
    Ive::Base.new.setup
  end

  private

  def git?
    options[:git] == true
  end
end

IveRunner.start
